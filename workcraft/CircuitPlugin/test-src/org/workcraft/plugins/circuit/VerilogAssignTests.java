package org.workcraft.plugins.circuit;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.workcraft.Framework;
import org.workcraft.exceptions.DeserialisationException;
import org.workcraft.exceptions.SerialisationException;
import org.workcraft.plugins.builtin.settings.EditorCommonSettings;
import org.workcraft.plugins.circuit.interop.VerilogFormat;
import org.workcraft.plugins.circuit.jj.verilog.TokenMgrError;
import org.workcraft.utils.FileUtils;
import org.workcraft.utils.PackageUtils;
import org.workcraft.workspace.WorkspaceEntry;

import java.io.File;
import java.io.IOException;
import java.net.URL;

class VerilogAssignTests {

    private static final String INTRO =
            "// Verilog netlist generated by Workcraft 3\n" +
            "module buffer (in, out);\n" +
            "    input in;\n" +
            "    output out;\n" +
            "\n";

    private static final String BASIC_ASSIGN = "    assign out = in;\n";
    private static final String NUMBER_ASSIGN = "    assign #01.234 out = in;\n";
    private static final String STRING_ASSIGN = "    assign #(DELAY1, DELAY2) out = in;\n";

    private static final String OUTRO =
            "\n" +
            "    // signal values at the initial state:\n" +
            "    // !in !out\n" +
            "endmodule\n";

    @BeforeAll
    static void init() {
        final Framework framework = Framework.getInstance();
        framework.init();
        EditorCommonSettings.setExportHeaderStyle(EditorCommonSettings.ExportHeaderStyle.BRIEF);
    }

    @AfterAll
    static void finish() {
        // Restore the default no-delay setting
        CircuitSettings.setVerilogAssignDelay("");
    }

    @Test
    void testAssignDelaySetting() {
        CircuitSettings.setVerilogAssignDelay(null);
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("   ");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("1.a");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("(ERROR");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("1");
        Assertions.assertEquals("1", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("0.1");
        Assertions.assertEquals("0.1", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay(".2");
        Assertions.assertEquals(".2", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay(" (delay1, delay2) ");
        Assertions.assertEquals("(delay1, delay2)", CircuitSettings.getVerilogAssignDelay());
    }

    @Test
    void testAssignDelayExport() throws DeserialisationException, IOException, SerialisationException {
        final Framework framework = Framework.getInstance();
        final ClassLoader classLoader = ClassLoader.getSystemClassLoader();

        String workName = PackageUtils.getPackagePath(getClass(), "buffer.circuit.work");
        URL url = classLoader.getResource(workName);
        WorkspaceEntry we = framework.loadWork(url.getFile());
        File directory = FileUtils.createTempDirectory(FileUtils.getTempPrefix(workName));

        CircuitSettings.setVerilogAssignDelay(null);
        File vNullFile = new File(directory, "export-null.v");
        framework.exportWork(we, vNullFile, VerilogFormat.getInstance());
        Assertions.assertEquals(INTRO + BASIC_ASSIGN + OUTRO, FileUtils.readAllText(vNullFile));
        Assertions.assertNotNull(framework.importWork(vNullFile));

        CircuitSettings.setVerilogAssignDelay("");
        File vEmptyFile = new File(directory, "export-empty.v");
        framework.exportWork(we, vEmptyFile, VerilogFormat.getInstance());
        Assertions.assertEquals(INTRO + BASIC_ASSIGN + OUTRO, FileUtils.readAllText(vEmptyFile));
        Assertions.assertNotNull(framework.importWork(vEmptyFile));

        CircuitSettings.setVerilogAssignDelay("0");
        File vZeroFile = new File(directory, "export-zero.v");
        framework.exportWork(we, vZeroFile, VerilogFormat.getInstance());
        Assertions.assertEquals(INTRO + BASIC_ASSIGN + OUTRO, FileUtils.readAllText(vZeroFile));
        Assertions.assertNotNull(framework.importWork(vZeroFile));

        CircuitSettings.setVerilogAssignDelay("01.234");
        File vNumberFile = new File(directory, "export-number.v");
        framework.exportWork(we, vNumberFile, VerilogFormat.getInstance());
        Assertions.assertEquals(INTRO + NUMBER_ASSIGN + OUTRO, FileUtils.readAllText(vNumberFile));
        Assertions.assertNotNull(framework.importWork(vNumberFile));

        CircuitSettings.setVerilogAssignDelay("(DELAY1, DELAY2)");
        File vStringFile = new File(directory, "export-string.v");
        framework.exportWork(we, vStringFile, VerilogFormat.getInstance());
        Assertions.assertEquals(INTRO + STRING_ASSIGN + OUTRO, FileUtils.readAllText(vStringFile));
        Assertions.assertNotNull(framework.importWork(vStringFile));
    }

    @Test
    void testAssignErrorImport() {
        final Framework framework = Framework.getInstance();
        final ClassLoader classLoader = ClassLoader.getSystemClassLoader();

        String numberErrorName = PackageUtils.getPackagePath(getClass(), "assign-delay-number-error.v");
        Assertions.assertThrows(org.workcraft.exceptions.DeserialisationException.class,
                () -> framework.importWork(classLoader.getResource(numberErrorName).getFile()));

        String stringErrorName = PackageUtils.getPackagePath(getClass(), "assign-delay-string-error.v");
        Assertions.assertThrows(TokenMgrError.class,
                () -> framework.importWork(classLoader.getResource(stringErrorName).getFile()));
    }

}
