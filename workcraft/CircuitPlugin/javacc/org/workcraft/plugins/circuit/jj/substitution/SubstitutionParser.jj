/**
 * JavaCC file
 */

options {
    JDK_VERSION = "1.8";
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(SubstitutionParser)
package org.workcraft.plugins.circuit.jj.substitution;

import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.io.InputStream;

import org.workcraft.types.Pair;
import org.workcraft.plugins.circuit.verilog.SubstitutionRule;

public class SubstitutionParser {

    private boolean invertRules;

    public SubstitutionParser(InputStream stream, boolean invertRules) {
        this(stream);
        this.invertRules = invertRules;
    }

}

PARSER_END(SubstitutionParser)

SKIP:
{
    " "
|
    "\t"
|
    "\r"
|
    "\n"
|
    <"//" (~["\r", "\n"])*>
|
    "/*" : WITHIN_COMMENT
|
    <"`" (~["\r", "\n"])*>
}

<WITHIN_COMMENT> SKIP:
{
    "*/" : DEFAULT
|
    <~[]>
}

TOKEN :
{
    <EXTENDED_NAME : ["A"-"Z", "a"-"z", "_", "/" ] ([ "A"-"Z", "a"-"z", "_", "0"-"9", ":", "/", "\\", "-"])*>
    |
    <STRING : "\"" (~["\""])+ "\"">
}

List<SubstitutionRule> parseSubstitutionRules() :
{
    SubstitutionRule rule;
    List<SubstitutionRule> rules = new LinkedList<>();
}
{
    (
        rule = parseSubstitutionRule()
        {
            rules.add(rule);
        }
    )*
    {
        return rules;
    }
}

SubstitutionRule parseSubstitutionRule() :
{
    Pair<String, String> gateSubstitution;
    Pair<String, String> portSubstitution;
    Map<String, String> portSubstitutions = new HashMap<>();
    Token extrasToken;
    String extras = null;
}
{
    gateSubstitution = parseSubstitution()
    [
        "("
            (
                portSubstitution = parseSubstitution() [","]
                {
                    String oldPortName = portSubstitution.getFirst();
                    String newPortName = portSubstitution.getSecond();
                    portSubstitutions.put(oldPortName, newPortName);
                }
            )*
        ")"
    ]
    [
        extrasToken = <STRING>
        {
            extras = extrasToken.image.substring(1, extrasToken.image.length() - 1);
        }
    ]
    {
        String oldGateName = gateSubstitution.getFirst();
        String newGateName = gateSubstitution.getSecond();
        return new SubstitutionRule(oldGateName, newGateName, portSubstitutions, extras);
    }
}

Pair<String, String> parseSubstitution():
{
    Token oldNameToken;
    Token newNameToken;
}
{
    oldNameToken = <EXTENDED_NAME> "=" newNameToken = <EXTENDED_NAME>
    {
        return invertRules ? new Pair<>(newNameToken.image, oldNameToken.image)
         : new Pair<>(oldNameToken.image, newNameToken.image);
    }
}
