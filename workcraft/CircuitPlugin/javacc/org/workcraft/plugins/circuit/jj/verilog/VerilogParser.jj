/**
 * JavaCC file
 */

options {
    JDK_VERSION = "1.8";
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(VerilogParser)
package org.workcraft.plugins.circuit.jj.verilog;

import org.workcraft.plugins.circuit.verilog.*;

import java.util.*;

public class VerilogParser {
}
PARSER_END(VerilogParser)

SKIP:
{
    " "
|
    "\t"
|
    "\r"
|
    "\n"
|
    <"//" (~["\r", "\n"])*>
|
    "/*" : WITHIN_COMMENT
|
    <"`" (~["\r", "\n"])*>
}

<WITHIN_COMMENT> SKIP:
{
    "*/" : DEFAULT
|
    <~[]>
}

<WITHIN_SPECIFY> SKIP:
{
    "endspecify" : DEFAULT
|
     <~[]>
}

<WITHIN_PRIMITIVE> SKIP:
{
    "endprimitive" : DEFAULT
|
     <~[]>
}

TOKEN:
{
    <MODULE : "module">
|
    <ENDMODULE : "endmodule">
|
    <INPUT : "input">
|
    <OUTPUT : "output">
|
    <INOUT : "inout">
|
    <REG : "reg">
|
    <WIRE : "wire">
|
    <ASSIGN : "assign">
|
    <SPECIFY : "specify"> : WITHIN_SPECIFY
|
    <PRIMITIVE : "primitive"> : WITHIN_PRIMITIVE
|
    <NAME : ["A"-"Z", "a"-"z", "_"] (["A"-"Z", "a"-"z", "_", "0"-"9", "."])*>
|
    <FORMULA: "=" (~[";"])* ";">
|
    <PETRIFY_NAME : ["A"-"Z", "a"-"z", "_", "/"] ([ "A"-"Z", "a"-"z", "_", "0"-"9", ":", "/", "\\", "-"])*>
|
    <STRING : "\"" (<CHAR> | <ESCAPESEQ>)* "\"">
|
    <#CHAR: [" ","!","#"-"[","]"-"~"]> // Printable ASCII characters excluding \ and "
|
    <#ESCAPESEQ: "\\" ["\"","\\","n"]> // 2-character sequences \\, \", and \n
|
    <LOGIC0 : "1'b0">
|
    <LOGIC1 : "1'b1">
|
    <INTEGER : ([ "0"-"9" ])+>
|
    <DELAY: ("#" ([ "0"-"9" ])* (["."])? ([ "0"-"9" ])+) | ("#(" (~["(", ")"])* ")")>
|
    <PETRIFY_ZERO_DELAY : "// This inverter should have a short delay" <WS> <NL>>
|
    <MPSAT_ZERO_DELAY : "// #PRAGMA: zero delay" <WS> <NL>>
|
    <PETRIFY50_INIT_STATE : "// signal values at the initial state:" <WS> <NL> <WS> "//">
|
    <PETRIFY51_INIT_STATE : "// Initial state:" <WS> <NL> <WS> "//">
|
    <MPSAT_INIT_STATE : "// initial values of the signals" <WS> <NL> <WS> "//">
|
    <#WS: ([" ", "\t"])*>
|
    <#NL: (["\n", "\r"])+>
}

List<VerilogModule> parseCircuit() :
{
    List<VerilogModule> modules;
}
{
    modules = parseModules()
    {
        return modules;
    }
}

List<VerilogModule> parseModules():
{
    VerilogModule module;
    List<VerilogModule> modules = new LinkedList<>();
}
{
    (
        module = parseModule()
        {
            modules.add(module);
        }
    )*
    {
        return modules;
    }
}

VerilogModule parseModule():
{
    String name;
    List<VerilogPort> ports;
    VerilogAssign assign;
    List<VerilogAssign> assigns = new LinkedList<>();
    VerilogInstance instance;
    List<VerilogInstance> instances = new LinkedList<>();
    Map<VerilogNet, Boolean> netStates = new HashMap<>();
}
{
    <MODULE> name = parseModuleName()
    ports = parsePorts()
    (
        (
            assign = parseAssign()
            {
                assigns.add(assign);
            }
        |
            instance = parseInstance()
            {
                instances.add(instance);
            }
        )
    )*
    [ (<PETRIFY50_INIT_STATE> | <PETRIFY51_INIT_STATE> | <MPSAT_INIT_STATE>)
        netStates = parseInitialState()
    ]
    <ENDMODULE>
    {
        return new VerilogModule(name, ports, assigns, instances, netStates);
    }
}

String parseModuleName():
{
    Token nameToken;
}
{
    (nameToken = <NAME> | nameToken = <PETRIFY_NAME>)
    {
        return nameToken.image;
    }
}

List<VerilogPort> parsePorts():
{
    List<VerilogPort> ports;
}
{
    (
        LOOKAHEAD("(" (<INPUT> | <OUTPUT>))
        ports = parseCompactPorts()
    |
        ports = parseComplexPorts()
    )
    {
        return ports;
    }
}

List<VerilogPort> parseCompactPorts():
{
    VerilogPort port;
    List<VerilogPort> ports = new LinkedList<>();
}
{
    [
        "("
            (
                port = parseCompactPort() [","]
                {
                    ports.add(port);
                }
            )*
        ")"
    ]
    ";"
    {
        return ports;
    }
}

VerilogPort parseCompactPort():
{
    VerilogPort.Type type;
    VerilogPort.Range range = null;
    Token nameToken;
}
{
    type = parsePortType() [range = parseRange()] nameToken = <NAME>
    {
        return new VerilogPort(nameToken.image, type, range);
    }
}

VerilogPort.Type parsePortType():
{
}
{
        <INPUT>
        {
            return VerilogPort.Type.INPUT;
        }
    |
        <OUTPUT>
        {
            return VerilogPort.Type.OUTPUT;
        }

}

List<VerilogPort> parseComplexPorts():
{
    List<String> declarations;
    List<VerilogPort> definitions;
}
{
    declarations = parsePortsDeclaration()
    definitions = parsePortsDefinitions()
    {
        HashMap<String, VerilogPort> nameToPort = new HashMap<>();
        for (VerilogPort port: definitions) {
            nameToPort.put(port.name, port);
        }
        List<VerilogPort> ports = new LinkedList<>();
        for (String name: declarations) {
            VerilogPort port = nameToPort.get(name);
            if (port != null) {
                ports.add(port);
            }
        }
        return ports;
    }
}

List<String> parsePortsDeclaration():
{
    List<String> names = null;
}
{
    ["(" names = parseNames() ")"] ";"
    {
        List<String> ports = new LinkedList<>();
        if (names != null) {
            ports.addAll(names);
        }
        return ports;
    }
}

List<VerilogPort> parsePortsDefinitions():
{
    List<VerilogPort> ports;
    List<VerilogPort> allPorts = new LinkedList<>();
}
{
    (
        ports = parsePortsDefinition()
        {
            allPorts.addAll(ports);
        }
    )*
    {
        return allPorts;
    }
}

List<VerilogPort> parsePortsDefinition():
{
    VerilogPort.Type type;
    VerilogPort.Range range = null;
    List<String> names;
    List<VerilogPort> ports = new LinkedList<>();
}
{
    (
        <WIRE> [parseRange()] parseNames() ";"
    |
        type = parsePortType() [range = parseRange()] names = parseNames() ";"
        {
            for (String name: names) {
                VerilogPort port = new VerilogPort(name, type, range);
                ports.add(port);
            }
        }
    )
    {
        return ports;
    }
}

VerilogPort.Range parseRange():
{
    Token topIndexToken;
    Token bottomIndexToken;
}
{
    "[" topIndexToken = <INTEGER> ":" bottomIndexToken = <INTEGER> "]"
    {
        Integer topIndex = Integer.parseInt(topIndexToken.image);
        Integer bottomIndex = Integer.parseInt(bottomIndexToken.image);
        return new VerilogPort.Range(topIndex, bottomIndex);
    }
}

List<String> parseNames():
{
    Token nameToken;
    List<String> names = new LinkedList<>();
}
{
    (
        nameToken = <NAME> [","]
        {
            String name = nameToken.image;
            names.add(name);
        }
    )*
    {
        return names;
    }
}

Map<VerilogNet, Boolean> parseInitialState():
{
    VerilogNet net;
    boolean state;
    Map<VerilogNet, Boolean> netStates = new HashMap<>();
}
{
    (
        (
            "!" net = parseNet()
            {
                state = false;
            }
        |
            net = parseNet()
            {
                state = true;
            }
        )
        {
           netStates.put(net, state);
        }
    )*
    {
        return netStates;
    }
}

VerilogAssign parseAssign():
{
    VerilogNet net;
    Token formulaToken;
}
{
    <ASSIGN> [<DELAY>] net = parseNet() formulaToken = <FORMULA>
    {
        String formula = formulaToken.image
                .replaceAll("^=", "")  // start of assign expression
                .replaceAll(";$", "")  // end of assign expression
                .replace("1'b0", "0")  // LOGIC0
                .replace("1'b1", "1"); // LOGIC1

        return new VerilogAssign(net, formula);
    }
}

VerilogInstance parseInstance():
{
    boolean zeroDelay = false;
    String moduleName;
    Token nameToken = null;
    List<String> parameters;
    List<VerilogConnection> connections;
}
{
    [
        (<PETRIFY_ZERO_DELAY> | <MPSAT_ZERO_DELAY>)
        {
            zeroDelay = true;
        }
    ]
    moduleName = parseModuleName()
    [nameToken = <NAME>]
    "(" connections = parseConnections() ")" ";"
    {
        String name = (nameToken == null ? null : nameToken.image);
        return new VerilogInstance(name, moduleName, connections, zeroDelay);
    }
}

List<VerilogConnection> parseConnections():
{
    List<VerilogConnection> connections;
}
{
    (
        LOOKAHEAD(".")
        connections = parseNamedConnections()
    |
        connections = parseOrderedConnections()
    )
    {
        return connections;
    }
}

List<VerilogConnection> parseNamedConnections():
{
    VerilogConnection connection;
    List<VerilogConnection> connections = new LinkedList<>();
}
{
    connection = parseNamedConnection()
    {
        connections.add(connection);
    }
    (
        "," connection = parseNamedConnection()
        {
            connections.add(connection);
        }
    )*
    {
        return connections;
    }
}

VerilogConnection parseNamedConnection():
{
    Token nameToken;
    List<VerilogNet> nets;
}
{
    "." nameToken = <NAME> "("
    (
        LOOKAHEAD("{")
        "{" nets = parseOptionalNets() "}"
    |
        nets = parseOptionalNetOrNetRange()
    )
    ")"
    {
        return new VerilogConnection(nameToken.image, nets);
    }
}

List<VerilogConnection> parseOrderedConnections():
{
    VerilogNet net;
    List<VerilogConnection> connections = new LinkedList<>();
}
{
    net = parseOptionalNet()
    {
        connections.add(new VerilogConnection(null, Collections.singletonList(net)));
    }
    (
        "," net = parseOptionalNet()
        {
            connections.add(new VerilogConnection(null, Collections.singletonList(net)));
        }
    )*
    {
        return connections;
    }
}

List<VerilogNet> parseOptionalNets():
{
    List<VerilogNet> netRange;
    List<VerilogNet> nets;
}
{
    nets = parseOptionalNetOrNetRange()
    (
        "," netRange = parseOptionalNetOrNetRange()
        {
            nets.addAll(netRange);
        }
    )*
    {
        return nets;
    }
}

List<VerilogNet> parseOptionalNetOrNetRange():
{
    VerilogNet net;
    List<VerilogNet> nets;
}
{
    (
        LOOKAHEAD(parseNetRange())
        nets = parseNetRange()
    |
        net = parseOptionalNet()
        {
            nets = new ArrayList<>();
            nets.add(net);
        }
    )
    {
        return nets;
    }
}

VerilogNet parseOptionalNet():
{
    VerilogNet net = null;
}
{
    [net = parseNet()]
    {
        return net;
    }
}

VerilogNet parseNet():
{
    Token nameToken;
    Integer index = null;
    VerilogNet net;
}
{
    nameToken = <NAME> [ index = parseIndex()]
    {
        net = new VerilogNet(nameToken.image, index);
    }
    {
        return net;
    }
}

Integer parseIndex():
{
    Token indexToken;
}
{
    "[" indexToken = <INTEGER> "]"
    {
        return Integer.parseInt(indexToken.image);
    }
}

List<VerilogNet> parseNetRange():
{
    Token nameToken;
    VerilogPort.Range range;
    List<VerilogNet> nets = new ArrayList<>();
}
{
    nameToken = <NAME> range = parseRange()
    {
        int index = range.getTopIndex();
        String name = nameToken.image;
        while (index != range.getBottomIndex()) {
            nets.add(new VerilogNet(name, index));
            index -= range.getStep();
        }
        nets.add(new VerilogNet(name, index));
        return nets;
    }
}
