/**
 * JavaCC file
 */

options {
    JDK_VERSION = "1.8";
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(ExpressionParser)
package org.workcraft.plugins.circuit.jj.expression;

import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import org.workcraft.dom.Node;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.NotFoundException;

import org.workcraft.plugins.circuit.expression.Expression;
import org.workcraft.plugins.circuit.expression.Formula;
import org.workcraft.plugins.circuit.expression.Term;
import org.workcraft.plugins.circuit.expression.Factor;
import org.workcraft.plugins.circuit.expression.Negation;
import org.workcraft.plugins.circuit.expression.Literal;
import org.workcraft.plugins.circuit.expression.Constant;

public class ExpressionParser {

}
PARSER_END(ExpressionParser)

SKIP:
{
    " "
|
    "\t"
|
    "\r"
|
    "\n"
|
    <"#" (~["\r", "\n"])*>
}

TOKEN :
{
    <CONST0 : "0">
|
    <CONST1 : "1">
|
    <NAME : ["A"-"Z", "a"-"z", "_"](["_", "A"-"Z", "a"-"z", "0"-"9", "."])*>
}

Expression parseExpression():
{
    Expression term;
    List<Expression> terms = new LinkedList<>();
}
{
    term = parseTerm()
    {
        terms.add(term);
    }
    (
        ("+" | "|" | "||")  term = parseTerm()
        {
            terms.add(term);
        }
    )*
    {
        if (terms.size() > 1) {
            return new Formula(terms);
        } else {
            return term;
        }
    }
}

Expression parseTerm():
{
    Expression factor;
    List<Expression> factors = new LinkedList<>();
}
{
    factor = parseFactor()
    {
        factors.add(factor);
    }
    (
        ["*" | "&" | "&&"] factor = parseFactor()
        {
            factors.add(factor);
        }
    )*
    {
        if (factors.size() > 1) {
            return new Term(factors);
        } else {
            return factor;
        }
    }
}

Expression parseFactor():
{
    Expression expression;
}
{
    (
        expression = parseLiteral()
    |
        expression = parseConstant()
    |
        ("!" | "~") expression = parseFactor()
        {
            return new Negation(expression);
        }
    |
        "(" expression = parseExpression() ")"
        {
            return new Factor(expression);
        }
    )
    {
        return expression;
    }
}

Expression parseLiteral():
{
    Token nameToken;
}
{
    nameToken = <NAME>
    {
        String name = nameToken.image;
        return new Literal(name);
    }
}

Expression parseConstant():
{
}
{
    <CONST0>
    {
        return new Constant(false);
    }
|
    <CONST1>
    {
        return new Constant(true);
    }
}
