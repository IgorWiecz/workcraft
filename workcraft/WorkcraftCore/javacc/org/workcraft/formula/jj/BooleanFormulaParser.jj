/**
 * JavaCC file
 */

options {
    JDK_VERSION = "1.8";
    STATIC = false;
    UNICODE_INPUT = true;
}
PARSER_BEGIN(BooleanFormulaParser)
package org.workcraft.formula.jj;

import java.util.Collection;
import java.util.HashMap;
import java.io.Reader;
import java.io.StringReader;

import org.workcraft.formula.BooleanFormula;
import org.workcraft.formula.BooleanVariable;
import org.workcraft.formula.FreeVariable;
import org.workcraft.formula.workers.BooleanWorker;
import org.workcraft.formula.workers.CleverBooleanWorker;
import org.workcraft.formula.visitors.StringGenerator;
import org.workcraft.types.Func;

public class BooleanFormulaParser {

    private static final BooleanWorker WORKER = CleverBooleanWorker.getInstance();

    private Func<String, ? extends BooleanFormula> vars;

    public BooleanFormulaParser(Reader reader, Func<String, ? extends BooleanFormula> vars) {
        this(reader);
        this.vars = vars;
    }

    private BooleanFormula var(String name) throws ParseException {
        BooleanFormula result = vars.eval(name);
        if (result == null) {
            throw new ParseException("Undefined variable: '" + name + "'");
        }
        return result;
    }

    private BooleanFormula constant(String value) {
        return "0".equals(value) ? WORKER.zero() : WORKER.one();
    }

    private BooleanFormula and(BooleanFormula a, BooleanFormula b) {
        return WORKER.and(a, b);
    }

    private BooleanFormula or(BooleanFormula a, BooleanFormula b) {
        return WORKER.or(a, b);
    }

    private BooleanFormula eq(BooleanFormula a, BooleanFormula b) {
        return WORKER.iff(a, b);
    }

    private BooleanFormula imply(BooleanFormula a, BooleanFormula b) {
        return WORKER.imply(a, b);
    }

    private BooleanFormula xor(BooleanFormula a, BooleanFormula b) {
        return WORKER.xor(a, b);
    }

    private BooleanFormula not(BooleanFormula a) {
        return WORKER.not(a);
    }

    public static BooleanFormula parse(String text, Func<String, ? extends BooleanFormula> vars)
            throws ParseException {

        if ((text == null) || text.isEmpty()) {
            return null;
        }
        StringReader reader = new StringReader(text);
        return new BooleanFormulaParser(reader, vars).formula();
    }

    public static BooleanFormula parse(String text, Collection<? extends BooleanVariable> variables)
            throws ParseException {

        final HashMap<String, BooleanVariable> labelToVariableMap = new HashMap<>();
        for(BooleanVariable var : variables) {
            labelToVariableMap.put(var.getLabel(), var);
        }
        // JavaCC v7.0.10 does not support Java 1.8 syntax for lambdas yet
        return parse(text, new Func<String, BooleanVariable>() {
            @Override
            public BooleanVariable eval(String label) {
                return labelToVariableMap.get(label);
            }
        });
    }

    public static BooleanFormula parse(String text) throws ParseException {
        final HashMap<String, BooleanVariable> labelToVariableMap = new HashMap<>();
        // JavaCC v7.0.10 does not support Java 1.8 syntax for lambdas yet
        return BooleanFormulaParser.parse(text, new Func<String, BooleanVariable>() {
            @Override
            public BooleanVariable eval(String label) {
                if (!labelToVariableMap.containsKey(label)) {
                    labelToVariableMap.put(label, new FreeVariable(label));
                }
                return labelToVariableMap.get(label);
            }
        });
    }

}

PARSER_END(BooleanFormulaParser)

SKIP :
{
    " "
|
    "\r"
|
    "\t"
|
    "\n"
}
TOKEN : /* OPERATORS */
{
    <EQUALS: "eq" | "=" | "==" | "<->" | "<=>">
|
    <NOTEQUALS: "neq" | "!=">
|
    <IMPLIES: "imp" | "=>" | "\u21d2" | "->">
|
    <OR: "or" | "|" | "+" | "\u2228">
|
    <XOR: "xor" | "^" | "\u2295">
|
    <AND: "and" | "&" | "*" | "\u2227" | "\u2022" | "\u00b7">
|
    <NOT: "not" | "!" | "~" | "\u00ac">
|
    <POSTNOT: "'">
}

TOKEN :
{
    <CONSTANT: "0"|"1">
|
    <VARIABLE: ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0"-"9", ".", "[", "]"])*>
}

BooleanFormula formula() :
{
    BooleanFormula result;
    BooleanFormula op;
}
{
    result = eqOp() ( <EQUALS> op = eqOp()
    { result = eq(result, op); } )*
    { return result; }
}

BooleanFormula eqOp() :
{
    BooleanFormula result;
    BooleanFormula op;
}
{
    result = neqOp() ( <NOTEQUALS> op = neqOp()
    { result = xor(result, op); } ) *
    { return result; }
}

BooleanFormula neqOp() :
{
    BooleanFormula result;
    BooleanFormula op;
}
{
    result = implyOp() [ <IMPLIES> op = implyOp()
    { result = imply(result, op); } ]
    { return result; }
}

BooleanFormula implyOp() :
{
    BooleanFormula result;
    BooleanFormula op;
}
{
    result = orOp() ( <OR> op = orOp()
    { result = or(result, op); } ) *
    { return result; }
}

BooleanFormula orOp() :
{
    BooleanFormula result;
    BooleanFormula op;
}
{
    result = xorOp() ( <XOR> op = xorOp()
    { result = xor(result, op); } ) *
    { return result; }
}

BooleanFormula xorOp() :
{
    BooleanFormula result;
    BooleanFormula op;
}
{
    result = andOp() ( <AND> op = andOp()
    { result = and(result, op); } ) *
    { return result; }
}

BooleanFormula andOp() :
{
    boolean inverse = false;
    BooleanFormula result;
}
{
    (<NOT> { inverse = !inverse; } )*
    result = literal()
    (<POSTNOT> { inverse = !inverse; } )*
    { return inverse ? not(result) : result; }
}

BooleanFormula literal() :
{
    Token t;
    BooleanFormula result;
}
{
    (
        t = <VARIABLE>
        { result = var(t.image); }
    |
        t = <CONSTANT>
        { result = constant(t.image); }
    |
        "(" result = formula() ")"
    )
    { return result; }
}
