options {
    JDK_VERSION = "1.8";
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(PetriStringParser)
package org.workcraft.plugins.cflt.jj.petri;

import java.io.*;
import java.nio.charset.StandardCharsets;
import org.workcraft.plugins.cflt.node.Node;
import org.workcraft.plugins.cflt.node.Operator;
import org.workcraft.plugins.cflt.node.NodeDetails;
import org.workcraft.plugins.cflt.node.NodeCollection;

public class PetriStringParser {
    private NodeCollection nodeCollection = new NodeCollection();
    private int transitionCounter = 0;

    public NodeCollection parse() throws ParseException {
       this.parseOneLine();
       return nodeCollection;
    }
}
PARSER_END(PetriStringParser)

<*> SKIP:
{
    < " " | "\t" | "\r" | "\n" | "\r\n" >
|
    <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")?>
}

TOKEN:
{
    <TRANSITION: ["A"-"Z", "a"-"z", "_"] (["A"-"Z", "a"-"z", "_", "0"-"9"])*>
}

void parseOneLine():
{
    String a;
}
{
    [
        a = concurrency()
        {
            if (nodeCollection.isEmpty()) {
                nodeCollection.setSingleTransition(a);
            }
        }
    ]
    <EOF>
}

String concurrency():
{
    String a;
    String b;
}
{
    a = choice()
    (
        "|" b = concurrency()
        {
            Node node = new Node(a, b, Operator.CONCURRENCY);
            nodeCollection.addNode(node);
        }
    )*
    {
        return a;
    }
}

String choice():
{
    String a;
    String b;
}
{
    a = sequence()
    (
        "#" b = choice()
        {
        	Node node = new Node(a, b, Operator.CHOICE);
            nodeCollection.addNode(node);
        }	
    )*
    {
        return a;
    }
}

String sequence():
{
    String a;
    String b;
}
{
    a = unary()
    (
        [";"] b = sequence()
        {
            Node node = new Node(a, b, Operator.SEQUENCE);
            nodeCollection.addNode(node);
        }
    )*
    {
        return a;
    }
}

String unary():
{
    String a;
}
{
    a = element()
    {
        return a;
    }
}

String element():
{
    Token t;
    String a;
}
{
    t = <TRANSITION>
    {
        String uniqueName = "t" + transitionCounter++;
        NodeDetails nodeDetails = new NodeDetails(
            uniqueName,
            t.toString()
        );
        nodeCollection.addNodeDetails(nodeDetails);
        return uniqueName;
    }
|
    "(" a = concurrency() ")"
    {
        return a;
    }
|
    "{" a = concurrency() "}"
    {
        nodeCollection.setContainsIteration(true);
        Node node = new Node(a, a, Operator.ITERATION);
        nodeCollection.addNode(node); return a;
    }
}
